var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Anlatilmayan Dersler","text":""},{"location":"index.html#index","title":"Index","text":"<ol> <li>tmux</li> <li>Environment Variables</li> <li>Code Formatting</li> <li>YAML</li> <li>VIM</li> <li>SSH</li> <li>Documentation</li> <li>Development Environment</li> <li>Pre Commit Hook</li> <li>Command Line Tool</li> <li>API</li> <li>Docker</li> <li>Docker Compose</li> <li>VSCode extenstions</li> <li>__ getitem __</li> <li>mkdocs</li> <li>regex</li> </ol>"},{"location":"api.html","title":"API","text":""},{"location":"cli.html","title":"Command Line Arguments","text":""},{"location":"code-formatting.html","title":"Code Formatting","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|black| C[Hmm...];\n  C --&gt; D[isort];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>Python programlama dili belki de di\u011fer dillerden farkl\u0131 k\u0131lan \u00f6nemli bir nokta, yaz\u0131lan \u00e7ok daha okunakl\u0131 olmas\u0131d\u0131r. Yani, kodu okumas\u0131 kolay bir bi\u00e7imde yazmak her zaman daha pythonic bir yakla\u015f\u0131md\u0131r. Fakat kod yazarken bu ince ayr\u0131nt\u0131lara her seferinde dikkat etmek biraz u\u011fra\u015ft\u0131r\u0131c\u0131 ve s\u0131k\u0131c\u0131 olabilir. Bu y\u00fczden baz\u0131 ara\u00e7lar kullanarak kod bi\u00e7imlendirme i\u015fini otomatikle\u015ftiririz.</p>"},{"location":"code-formatting.html#black","title":"black","text":"<p>Black, temelde bir kod formatlay\u0131c\u0131d\u0131r. Temel g\u00f6revi, birden fazla geli\u015ftricisi bulunan bir projede kodun sanki tek bir ki\u015fi taraf\u0131ndan yaz\u0131lm\u0131\u015f gibi g\u00f6r\u00fcnmesini sa\u011flamakt\u0131r.Python kodlar\u0131 i\u00e7in resmi stil k\u0131lavuzu olan <code>PEP 8</code>'e s\u0131k\u0131 s\u0131k\u0131ya ba\u011fl\u0131d\u0131r.</p> <p>Genellikle yaz\u0131l\u0131mc\u0131lar <code>vscode</code> veya benzer bir edit\u00f6r kullan\u0131rken dosyalar\u0131n\u0131 her kaydettiklerinde otomatik olarak \u00e7al\u0131\u015faca \u015fekilde ayarlar veya <code>s\u00fcrekli entegrasyon (CI)</code> pipeline'\u0131n\u0131n bir par\u00e7as\u0131 olarak kullan\u0131l\u0131r. Bu konuda <code>pre-commit-hook</code> k\u0131sm\u0131nda bahsedece\u011fim.</p>"},{"location":"code-formatting.html#kurulum-black","title":"Kurulum (black)","text":"<p>Kurulum i\u00e7in <code>pip</code> veya <code>conda</code> kullanabiliriz:</p> Bash<pre><code>pip install black\n\n# for conda\nconda install black\n</code></pre>"},{"location":"code-formatting.html#kullanm-black","title":"Kullan\u0131m (black)","text":"<p>A\u015fa\u011f\u0131daki gibi bir kod blo\u011funa sahip oldu\u011fumuzu d\u00fc\u015f\u00fcnelim. Bu bir\u00e7ok a\u00e7\u0131dan hatal\u0131 bir \u00f6rnek, fakat \u00e7o\u011fu zaman yaz\u0131l\u0131mc\u0131lar\u0131n al\u0131\u015fkanl\u0131klar\u0131 farkl\u0131 olabiliyor.</p> unformatted.py<pre><code># Code source: https://towardsdatascience.com/treat-yourself-using-the-black-library-when-writing-python-code-7626b6099247\n# file: code-example/formatted.py\n\ndef my_function(a=1,b=2,c=3,d=4):\n    my_list = [a, \n               b, \n               c, \n               d]\n    return sum(my_list)\nif True: print(my_function())\n</code></pre> <p>Bunu standartla\u015ft\u0131rmak i\u00e7in yapabilece\u011fimiz en basit \u015fey iste black kullanmak.</p> Bash<pre><code>$ black code-example/formatted.py\n# reformatted code-example/formatted.py\n\n# All done! \u2728 \ud83c\udf70 \u2728\n# 1 file reformatted.\n</code></pre> <p>Son durumda kodumuz bu \u015fekilde g\u00f6z\u00fckecek.</p> formatted.py<pre><code># file: code-example/formatted.py\n\ndef my_function(a=1, b=2, c=3, d=4):\n    my_list = [a, b, c, d]\n    return sum(my_list)\n\n\nif True:\n    print(my_function())\n</code></pre>"},{"location":"code-formatting.html#isort","title":"isort","text":"<p>isort, Python importlarini alfabetik olarak s\u0131ralayan ve bunlar\u0131 b\u00f6l\u00fcmlere ve t\u00fcre g\u00f6re ay\u0131ran bir yard\u0131mc\u0131 k\u00fct\u00fcphanedir. Importlarin proje veya dosya boyunca temiz ve tutarl\u0131 bir \u015fekilde y\u00f6netilmesini sa\u011flar.</p>"},{"location":"code-formatting.html#kurulum-isort","title":"Kurulum (isort)","text":"<p>Kurulum i\u00e7in <code>pip</code> veya <code>conda</code> kullanabiliriz:</p> Bash<pre><code>pip install isort\n\n# for conda\nconda install isort\n</code></pre>"},{"location":"code-formatting.html#kullanm-isort","title":"Kullan\u0131m (isort)","text":"<p>Python dosyas\u0131nda kar\u0131\u015f\u0131k ve d\u00fczensiz importlar i\u00e7eren bir \u00f6rnek.</p> unsorted.py<pre><code>from my_module import function_three\nimport os\nfrom another_module import function_one, function_two\nimport sys\nfrom third_module import (function_four,\n                          function_five, function_six)\n</code></pre> <p>Ayn\u0131 dosya <code>isort</code> kullan\u0131larak yeniden d\u00fczenlendi\u011finde, i\u00e7e aktarmalar alfabetik s\u0131raya g\u00f6re ve uygun gruplara ayr\u0131lm\u0131\u015f olarak d\u00fczenlenir.</p> sorted.py<pre><code>import os\nimport sys\n\nfrom another_module import function_one, function_two\nfrom my_module import function_three\nfrom third_module import function_four, function_five, function_six\n</code></pre> <p>Her iki ara\u00e7 da, kod formatlamay\u0131 otomatikle\u015ftirerek ve standartla\u015ft\u0131rarak kod tabanlar\u0131n\u0131 daha temiz, daha bak\u0131labilir ve daha okunabilir hale getirdikleri i\u00e7in Python toplulu\u011funda yayg\u0131n olarak benimsenmi\u015ftir. Bir projede farkl\u0131 kod formatlama y\u00f6nlerini ele almak i\u00e7in birlikte kullan\u0131labilirler: Genel kod yap\u0131s\u0131 i\u00e7in Black ve i\u00e7e aktarma ifadeleri i\u00e7in isort.</p>"},{"location":"code-formatting.html#pre-commit-hook","title":"Pre-commit hook","text":"<p>Ayr\u0131ca, d\u00fczg\u00fcn bi\u00e7imlendirilmemi\u015f kodlar\u0131 yakalamak i\u00e7in <code>pre-commit-hook</code> kullanabiliriz ve kod bi\u00e7imlendiricilerini \u00e7al\u0131\u015ft\u0131rarak, herhangi bir bi\u00e7imlendirme yap\u0131lmas\u0131 gerekiyorsa tamam\u0131n\u0131 otomatikle\u015ftirebiliriz. Bu, yanl\u0131\u015f bi\u00e7imlendirilmi\u015f kodu asla <code>commit</code> etmememizi sa\u011flar.</p> <p><code>pre-commit-hook</code> konusuna ba\u015fka bir derste de\u011finece\u011fim, ancak bu konuda nas\u0131l kurulum yap\u0131laca\u011f\u0131na dair di\u011fer kaynaklar\u0131 ara\u015ft\u0131rabilirsiniz.</p>"},{"location":"code-formatting.html#further-reading-sources","title":"Further Reading &amp; Sources","text":"<ul> <li>https://towardsdatascience.com/treat-yourself-using-the-black-library-when-writing-python-code-7626b6099247</li> </ul>"},{"location":"docker-compose.html","title":"Docker Compose","text":""},{"location":"docker.html","title":"Docker","text":""},{"location":"documentation.html","title":"Documentation","text":""},{"location":"env-variables.html","title":"Environment Variables","text":"<p>Yaz\u0131l\u0131mc\u0131lar \u00e7o\u011fu zaman API keyleri, \u015fifreler veya di\u011fer hassas bilgiler gibi gizli tutulmas\u0131 gereken bilgilerle \u00e7al\u0131\u015fmas\u0131 gerekir. Bu bilgilerin g\u00fcvenli ve etkili bir \u015fekilde y\u00f6netilmesi, yetkisiz eri\u015fim veya s\u0131z\u0131nt\u0131lar\u0131 \u00f6nlemek i\u00e7in \u00e7ok \u00f6nemlidir.</p> <p>Python'da kimlik bilgilerinizi y\u00f6netmek i\u00e7in kullan\u0131lan <code>python-dotenv</code> k\u00fct\u00fcphanesi bu sebeple kullan\u0131l\u0131r. Bu derste, <code>python-dotenv</code>'in temellerini ve bu k\u00fct\u00fcphanenin gizli kalmas\u0131 gereken bilgilerinizi kolayl\u0131kla y\u00f6netmenize nas\u0131l yard\u0131mc\u0131 olabilece\u011fini anlataca\u011f\u0131m.</p> <p>python-dotenv, hassas verilerinizi kaynak kodunuzdan ayr\u0131 bir \u015fekilde tutman\u0131za olanak tan\u0131yan bir k\u00fct\u00fcphanedir. \u00c7evre de\u011fi\u015fkenleri kullanarak kimlik bilgilerinizi y\u00f6netmenizi sa\u011flar, bu da onlar\u0131 g\u00fcvenli bir \u015fekilde saklaman\u0131za ve gerekti\u011finde kolayca eri\u015fmenize yard\u0131mc\u0131 olur. Bu y\u00f6ntem, kimlik bilgilerinizi do\u011frudan kodunuzda saklamaktan \u00e7ok daha g\u00fcvenlidir ve yanl\u0131\u015fl\u0131kla bu bilgilerin kamu ortam\u0131na s\u0131zmas\u0131n\u0131 \u00f6nler.</p>"},{"location":"env-variables.html#kurulum","title":"Kurulum","text":"Bash<pre><code>pip install python-dotenv\n</code></pre>"},{"location":"env-variables.html#kullanm","title":"Kullan\u0131m","text":"<p>Once you have installed python-dotenv, you can create a .env file in your project directory to store your environment variables. A .env file is a plain text file that contains a list of key-value pairs in the format KEY=VALUE. Each key-value pair represents an environment variable that you want to set.</p> <p>For example, let\u2019s say you have an API key that you want to use in your Python script. You can store the API key in your <code>.env</code> file like this:</p> .env<pre><code># .env file example\n\nTOKEN=\"7958144280:AAEVVfsxx8PdZ3Iw6aLNZpoYqCTpifZPWYA\"\n</code></pre> env_example.py<pre><code># simple python script using dotenv\n\nimport logging\nimport os\nimport sys\n\nfrom dotenv import load_dotenv\nfrom rich.logging import RichHandler\n\nLOG_FORMAT = \"%(asctime)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(\n    level=\"NOTSET\", format=LOG_FORMAT, datefmt=\"[%X]\", handlers=[RichHandler()]\n)\n\nload_dotenv()\n\nTOKEN = os.getenv(\"TOKEN\")\nlogging.info(f\"Token: {TOKEN}\")\n\ntry:\n    OPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n    logging.info(\"OPENAI_API_KEY retrieved successfully.\")\nexcept KeyError:\n    logging.error(\"Environment variables for OPENAI_API_KEY not set properly.\")\n    sys.exit(1)\n</code></pre> <p></p> Bash<pre><code>$ python env_example.py\n\n# [22:46:27] - INFO - Token: 7958144280:AAEVVfsxx8PdZ3Iw6aLNZpoYqCTpifZPWYA\n# [22:46:27] - ERROR - Environment variables for OPENAI_API_KEY not set properly.\n</code></pre> <p>python-dotenv, gizli kalmas\u0131 gereken keyleri g\u00fcvende tutmak i\u00e7in vard\u0131r ve kodunuzda kazara hassas bilgi maruziyetini \u00f6nleyebilirsiniz. <code>.env</code> dosyas\u0131 genellikle <code>.gitignore</code> i\u00e7ine eklenir. Bu, hassas verilerin yanl\u0131\u015fl\u0131kla bir repoya push etmenizi \u00f6nler.</p>"},{"location":"env-variables.html#gitignore","title":".gitignore","text":"<p>Git s\u00fcr\u00fcm kontrol sisteminin takip etmesini istemedi\u011finiz dosya ve dizinleri belirtir. Bu dosyada belirtilen dosyalar, Git taraf\u0131ndan yok say\u0131l\u0131r ve depoya y\u00fcklenmez. Hassas verileri i\u00e7eren veya gereksiz dosyalar\u0131 (\u00f6rn. ge\u00e7ici dosyalar, virtual environmentlar, log dosyalar\u0131 veya .env) repoya eklememek i\u00e7in kullan\u0131l\u0131r.</p> <p>Python i\u00e7in olu\u015fturulmus bir <code>.gitignore</code> dosyas\u0131n\u0131n 100 ve 113. sat\u0131rlar\u0131 aras\u0131ndaki d\u0131\u015flanan <code>.env</code> dosyalar\u0131n\u0131 g\u00f6rebilirsiniz.</p> <p></p>"},{"location":"env-variables.html#further-readings-sources","title":"Further Readings &amp; Sources","text":"<ul> <li>https://medium.com/@c17hawke/unlock-secrets-to-managing-your-credentials-with-python-dotenv-quickstart-guide-5e0e34cd5c9a</li> <li>https://medium.com/@daryl-goh/working-with-environment-variables-in-python-using-dotenv-5800d458f71a</li> </ul>"},{"location":"pre-commit-hook.html","title":"pre-commit-hook","text":""},{"location":"ssh.html","title":"SSH","text":""},{"location":"tmux.html","title":"tmux","text":"<p>tmux bir terminal \u00e7oklay\u0131c\u0131s\u0131d\u0131r ve \u00f6zellikle uzun s\u00fcren veya \u00e7oklu terminal oturumlar\u0131n\u0131 y\u00f6netirken kullan\u0131r\u0131z. Bu ara\u00e7, kullan\u0131c\u0131lar\u0131n birden fazla terminal seans\u0131n\u0131 tek bir aray\u00fczde y\u00f6netmelerine olanak tan\u0131r. \u00d6zellikle birden \u00e7ok g\u00f6reve ayn\u0131 anda odaklanman\u0131z gerekti\u011finde, i\u015f ak\u0131\u015f\u0131n\u0131z\u0131 b\u00fcy\u00fck \u00f6l\u00e7\u00fcde kolayla\u015ft\u0131rmaya yarar.</p> <p>\u00d6nemli bir \u00f6zelli\u011fi, tmux oturumlar\u0131n\u0131n ba\u011flant\u0131 kesilse bile korunmas\u0131d\u0131r. Yani, bir sunucuyla uzaktan \u00e7al\u0131\u015f\u0131rken ba\u011flant\u0131n\u0131z kesilirse, tmux oturumunuz arka planda \u00e7al\u0131\u015fmaya devam eder ve ba\u011flant\u0131y\u0131 yeniden kurdu\u011funuzda kald\u0131\u011f\u0131n\u0131z yerden devam edebilirsiniz. Bu, \u00f6zellikle karars\u0131z internet ba\u011flant\u0131lar\u0131 olan veya uzun s\u00fcreli komutlar \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda olduka i\u015fe yar\u0131yor.</p> <p></p>"},{"location":"tmux.html#tmuxa-neden-ihtiyacm-olur","title":"tmux'a neden ihtiyac\u0131m olur?","text":"<p>tmux, \u00f6zellikle uzak oturumlar\u0131 y\u00f6netirken veya bir terminal ortam\u0131nda birden fazla g\u00f6revde gitgel yaparken, komut sat\u0131r\u0131 i\u015fleriniz i\u00e7in g\u00fc\u00e7l\u00fc, esnek ve dayan\u0131kl\u0131 bir kontrol merkezi gibi \u00e7al\u0131\u015f\u0131r.</p> <ul> <li> <p>\u00c7oklu Pencereler: tmux, tek bir terminal penceresi i\u00e7inde birden \u00e7ok pencere a\u00e7man\u0131za olanak tan\u0131r. Bu, lokal makinenizde oldu\u011fu gibi birden fazla terminal sekmesi a\u00e7amayaca\u011f\u0131n\u0131z bir uzak sunucuda \u00e7al\u0131\u015f\u0131rken \u00f6zellikle faydal\u0131d\u0131r.</p> </li> <li> <p>Sessions and Detaching: Bir tmux oturumundan ayr\u0131labilir ve onu arka planda \u00e7al\u0131\u015f\u0131r durumda b\u0131rakabilirsiniz. Bu, bir tmux oturumu i\u00e7inde uzun s\u00fcreli bir i\u015flem ba\u015flatabilir, ondan ayr\u0131labilir ve sonra, farkl\u0131 bir bilgisayardan bile, daha sonra yeniden ba\u011flanabilirsiniz. Bu, uzun s\u00fcren g\u00f6revler i\u00e7in uzak sunucularda kapanmayan bir oturum gibi de\u011ferlidir.</p> </li> <li> <p>Persistent Sessions: Bir sunucudan ba\u011flant\u0131n\u0131z kesilirse (SSH ba\u011flant\u0131s\u0131n\u0131 kaybetmek gibi), tmux oturumunuzu aktif tutar. Tekrardan ba\u011flanabilir ve hi\u00e7bir \u015fey kaybetmeden kald\u0131\u011f\u0131n\u0131z yerden devam edebilirsiniz.</p> </li> <li> <p>Split Panes: tmux, terminal pencerenizi yatay ve dikey olarak birden fazla panele b\u00f6lmektedir. Bu, birka\u00e7 komutun \u00e7\u0131kt\u0131s\u0131n\u0131 ayn\u0131 anda g\u00f6rebilmeniz, izleme, d\u00fczenleme veya birden fazla komut sat\u0131r\u0131 uygulamas\u0131n\u0131 yan yana \u00e7al\u0131\u015ft\u0131rman\u0131z i\u00e7in harikad\u0131r.</p> </li> </ul>"},{"location":"tmux.html#install-tmux","title":"Install tmux","text":"<p>Source: https://github.com/tmux/tmux/wiki/Installing <sup>1</sup></p> Platform Install Command Arch Linux <code>pacman -S tmux</code> Debian or Ubuntu <code>apt install tmux</code> Fedora <code>dnf install tmux</code> RHEL or CentOS <code>yum install tmux</code> macOS (using Homebrew) <code>brew install tmux</code> macOS (using MacPorts) <code>port install tmux</code> openSUSE <code>zypper install tmux</code>"},{"location":"tmux.html#get-started-with-tmux","title":"Get Started with tmux","text":"<p>tmux kullanmaya ba\u015flamak i\u00e7in terminalinizde <code>tmux</code> yaz\u0131n. Bu komut, bir tmux sunucusu ba\u015flat\u0131r ve varsay\u0131lan bir oturum olu\u015fturur <code>(number 0)</code></p> Bash<pre><code>tmux\n</code></pre> <p></p> <p>Bir tmux oturumundan ayr\u0131lmak i\u00e7in Ctrl+B ard\u0131ndan D (detach) tu\u015flar\u0131na bas\u0131n. Tmux, \u201cprefix\u201d kombinasyonuna bas\u0131larak tetiklenen bir dizi tu\u015f keybindingleri (klavye k\u0131sayollar\u0131) kullan\u0131r. Varsay\u0131lan olarak, prefix <code>Ctrl+B</code> dir. Daha sonra, mevcut oturumdan ayr\u0131lmak i\u00e7in <code>D</code> (detach) tu\u015funa bas\u0131n.</p> Bash<pre><code>~ tmux ls\n\n# 0: 1 windows (created Thu Nov 30 20:16:45 2023)\n</code></pre> <p></p> <p>A\u015fa\u011f\u0131daki komut ile birlikte hali haz\u0131rda a\u00e7m\u0131\u015f oldu\u011funuz bir session'\u0131 yeniden adland\u0131rabilirsiniz.</p> Bash<pre><code># tmux rename -t &lt;target_session&gt; &lt;new_name&gt;\n~ tmux rename -t 0 cobanov\n</code></pre> <p>Bu noktada <code>SSH</code> ba\u011flant\u0131n\u0131z\u0131 kesebilirsiniz yine de komut \u00e7al\u0131\u015fmaya devam edecektir. \u0130stedi\u011finize mevcut tmux oturumuna yeniden ba\u011flanarak kald\u0131\u011f\u0131n\u0131z yerden devam edebilirsiniz:</p> Bash<pre><code># tmux a -t &lt;session_name&gt;\n~ tmux attach -t cobanov\n</code></pre> <p>As you can see, her sey oldugu yerinde devam ediyor.</p>"},{"location":"tmux.html#managing-panes","title":"Managing Panes","text":"<p>Bir masa\u00fcst\u00fc ortam\u0131nda nas\u0131l pencereleriniz varsa\u00f6 Tmux'ta panelleriniz vard\u0131r. Ayn\u0131 pencereler gibi, bu paneller de birden fazla uygulamayla etkile\u015fimde bulunman\u0131z\u0131 sa\u011flar ve benzer \u015fekilde a\u00e7\u0131labilir, kapat\u0131labilir, yeniden boyutland\u0131r\u0131labilir ve ta\u015f\u0131nabilir.</p> <p>Standart bir masa\u00fcst\u00fcn ortam\u0131ndan farkl\u0131 olarak, bu paneller t\u00fcm terminale d\u00f6\u015fenmi\u015ftir ve \u00e7o\u011funlukla tmux k\u0131sayollar\u0131 ile y\u00f6netilir. (fare i\u015flevselli\u011fi eklenebilir olsa da). Yeni bir panel olu\u015fturmak i\u00e7in ekran\u0131 yatay veya dikey olarak b\u00f6lersiniz.<sup>2</sup></p>"},{"location":"tmux.html#split-pane-vertically","title":"Split pane vertically","text":"Text Only<pre><code>ctrl+b %\n</code></pre>"},{"location":"tmux.html#split-pane-horizontally","title":"Split pane horizontally","text":"Text Only<pre><code>ctrl+b \"\n</code></pre>"},{"location":"tmux.html#moving-between-panels-4","title":"Moving between panels <sup>4</sup>","text":"Text Only<pre><code>ctrl+b [arrow key]\n</code></pre> <p>tmux'ta t\u00fcm k\u0131sayol tu\u015flar\u0131n\u0131 g\u00f6rmek i\u00e7in basit\u00e7e <code>bind-key ?</code> komutunu kullan\u0131n, benim durumumda bu <code>CTRL-B ?</code> olacakt\u0131r.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.<sup>3</sup></p>"},{"location":"tmux.html#further-reading-sources","title":"Further Reading &amp; Sources","text":"<ol> <li> <p>https://github.com/tmux/tmux \u21a9</p> </li> <li> <p>https://gist.github.com/MohamedAlaa/2961058 \u21a9</p> </li> <li> <p>https://leanpub.com/the-tao-of-tmux/read \u21a9</p> </li> <li> <p>https://medium.com/pragmatic-programmers/a-beginners-guide-to-tmux-7e6daa5c0154 \u21a9</p> </li> </ol>"},{"location":"vim.html","title":"VIM","text":""},{"location":"yaml.html","title":"Python YAML Configuration Guide","text":"<p>YAML (YAML Ain't Markup Language) is a human-readable data serialization format that is commonly used for configuration files and data exchange between programming languages. Python has built-in support for parsing YAML files using the yaml module, which provides functions for reading and writing YAML data.</p>"},{"location":"yaml.html#install-and-import-yaml","title":"Install and Import YAML","text":"Bash<pre><code>pip install PyYAML\n</code></pre> <p>After the package installation, you can proceed to import the PyYAML package in Python.</p> Python<pre><code>import yaml\n</code></pre>"},{"location":"yaml.html#loading-yaml-with-python","title":"Loading YAML with Python","text":"<p>In this example, we open the file config.yaml in read mode and pass it to the yaml.load() function. We also specify the Loader parameter as yaml.FullLoader, which is a safe loader that can load any YAML document.</p> Python<pre><code>with open(\"config.yaml\") as f:\n    cfg = yaml.load(f, Loader=yaml.FullLoader)\n</code></pre>"},{"location":"yaml.html#printing-config","title":"Printing Config","text":"Python<pre><code>print(cfg)\n</code></pre> Python<pre><code>{'maintainer': 'Mert Cobanov',\n 'pca_params': {'n_components': 224},\n 'umap_params': {'metrics': ['euclidean', 'l1', 'manhattan'],\n                 'min_dist': [0.01, 0.1, 0.5],\n                 'spread': 1.0},\n 'visualize_params': {'median_threshold': 6}}\n</code></pre>"},{"location":"yaml.html#individual","title":"Individual","text":"Python<pre><code>print(cfg['pca_params'])\n\n# 'n_components': 224\n</code></pre>"},{"location":"yaml.html#updating-yaml-with-python","title":"Updating YAML with Python","text":"<p>Updating a YAML configuration file with Python involves loading the existing configuration data, modifying it in memory, and then writing the updated data back to the file. This can be accomplished using the pyyaml library, which provides functions for reading and writing YAML data.</p> <p>Here's an example of how to update a YAML file using Python:</p> Python<pre><code>cfg[\"n_components\"] = 0.2\ncfg[\"umap_params\"][\"metrics\"].append(\"chebyshev\")\n</code></pre> Python<pre><code>with open(\"config.yaml\", \"w\") as f:\n    cfg = yaml.dump(\n        cfg, stream=f, default_flow_style=False, sort_keys=False\n    )\n</code></pre> <p>It's important to note that the <code>yaml.dump()</code> function will overwrite the entire contents of the file, so you should be careful to include all of the data that you want to keep in the updated file.</p> <p>If you only want to update a specific section of the YAML data, you can modify just that section in memory and then write the entire data structure back to the file.</p>"}]}